#!/usr/bin/env python3

import os
import sys
import json
import argparse
import json_minify
from urllib.request import urlopen

#
# Default Configuration File
#
DEFAULTS_FILENAME = '/lwa/software/defaults.json'

#
# Make sure shlQube.py is in our path
#
sys.path.append(os.path.dirname(DEFAULTS_FILENAME))
from shlBard import get_mc4002_lead_status
from shlQube import get_iceqube_lead_status


def main(args):
    # Parse the config. file
    with open(args.config, 'r') as ch:
        config = json.loads(json_minify.json_minify(ch.read()))
        
    # Load in the controller type
    try:
        hvac_type = config['hvac']['type']
    except KeyError:
        raise RuntimeError("No configuration info. found about the controller")
        
    # Load in the IP address to use
    try:
        ip_address = config['hvac']['ip'][0]
    except (KeyError, IndexError):
        raise RuntimeError("No configuration info. found for HVAC #%i" % 1)
        
    # Query the unit
    if hvac_type == 'iceqube':
        status = get_iceqube_lead_status(ip_address)
        if status is None:
            print('lead: unk')
        elif status:
            print('lead: 1')
        else:
            print('lead: 2')
            
    elif hvac_type == 'bard':
        status = get_mc4002_lead_status(ip_address)
        if status is None:
            print('lead: unk')
        else:
            print(f"lead: {status}")
            
    else:
        raise RuntimeError("No configuration info. found about the controller")


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='determine which IceQube/Bard MC4002 HVAC unit is lead',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
        )
    parser.add_argument('-c', '--config', type=str, default=DEFAULTS_FILENAME,
                        help='name of the SHL configuration file to use')
    args = parser.parse_args()
    main(args)
